name: Build WSA

on:
  workflow_dispatch:
    inputs:
      architecture:
        description: "CPU architecture"
        required: true
        default: x64
        type: choice
        options:
          - x64
          - arm64

      release_type:
        description: "WSA release type"
        required: true
        default: RP
        type: choice
        options:
          - retail
          - RP
          - WIS
          - WIF

      magisk_version:
        description: "Magisk channel"
        required: true
        default: stable
        type: choice
        options:
          - stable
          - beta
          - canary
          - debug

      google_apps_brand:
        description: "Google apps distribution"
        required: true
        default: MindTheGapps
        type: choice
        options:
          - none
          - MindTheGapps
          - OpenGApps

      google_apps_variant:
        description: "Google apps variant"
        required: true
        default: pico
        type: choice
        options:
          - pico

      remove_amazon:
        description: "Remove Amazon Store"
        required: true
        default: false
        type: boolean

      root_solution:
        description: "Root solution"
        required: true
        default: magisk
        type: choice
        options:
          - magisk
          - none

env:
  WSA_BUILD_ARCHITECTURE: ${{ inputs.architecture }}
  WSA_BUILD_RELEASE_TYPE: ${{ inputs.release_type }}
  WSA_BUILD_MAGISK_VERSION: ${{ inputs.magisk_version }}
  WSA_BUILD_GOOGLE_APPS_BRAND: ${{ inputs.google_apps_brand }}
  WSA_BUILD_GOOGLE_APPS_VARIANT: ${{ inputs.google_apps_variant }}
  WSA_BUILD_REMOVE_AMAZON: ${{ inputs.remove_amazon }}
  WSA_BUILD_ROOT_SOLUTION: ${{ inputs.root_solution }}

jobs:
  matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Generate build matrix
        id: set-matrix
        uses: actions/github-script@v6
        with:
          script: |
            let matrix = {};
            let arch = "${{ github.event.inputs.arch }}"
            switch ( arch ) {
              case "x64":
                matrix.arch = ["x64"];
                break;
              case "arm64":
                matrix.arch = ["arm64"];
                break;
              default:
                matrix.arch = ["x64", "arm64"];
                break;
            }
            core.setOutput("matrix",JSON.stringify(matrix));

  build:
    runs-on: ubuntu-20.04
    needs: matrix
    strategy:
      matrix: ${{fromJson(needs.matrix.outputs.matrix)}}
    steps:
      - name: Install dependencies  
        run: ./scripts/install_deps.sh
        
      - name: Building Magisk on WSA
        run: ./scripts/build.sh
        
      - name: Patch WSA
        run: |
          cd ./output/*/WsaClient
          wget $((curl https://api.github.com/repos/cinit/WSAPatch/releases/latest -s | grep -o '"browser_download_url": "[^"]*') | grep -o '[^"]*$')
          p7zip -d *.7z
          cd ..
          ((sed 's/Name="Windows.Desktop" MinVersion="[0-9\.]*"/Name="Windows.Desktop" MinVersion="10.0.19045.2311"/g' AppxManifest.xml ) | sed 's/.*Name="customInstallActions.*//g' ) | sed '/    <desktop6:Extension Category="windows.customInstall">/,/    <\/desktop6:Extension>/d' >> tmp.xml
          rm AppxManifest.xml
          mv tmp.xml AppxManifest.xml
          cd ..
          
      - name: Upload
        uses: actions/upload-artifact@v3.1.2
        with:
          name: PatchedWsaWithMagisk
          path: MagiskOnWSALocal/output
